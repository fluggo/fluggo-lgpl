<?xml version="1.0" encoding="utf-8" ?> 
<root>
	<Stream>
		<method name="BeginWrite">
			<summary>
				Begins an asynchronous write operation.
			</summary>
			<param name="buffer">The buffer to write data from.</param>
			<param name="offset">The byte offset in <paramref name="buffer"/> from which to begin writing.</param>
			<param name="count">The maximum number of bytes to write.</param>
			<param name="callback">An optional asynchronous callback, to be called when the write is complete.</param>
			<param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests.</param>
			<returns>An <see cref='IAsyncResult'/> that represents the asynchronous write, which could still be pending.</returns>
			<exception cref="ArgumentException">One or more of the arguments is invalid.</exception>
			<exception cref="ObjectDisposedException">Methods were called after the stream was closed.</exception>
			<exception cref='NotSupportedException'>The current <see cref='Stream'/> implementation does not support the write operation.</exception>
		</method>
		
		<method name='Write'>
			<summary>
				Writes a sequence of bytes to the current stream and advances the current position within this stream by the number of bytes written.
			</summary>
			<param name='buffer'>An array of bytes. This method copies count bytes from <paramref name='buffer'/> to the current stream.</param>
			<param name='offset'>The zero-based byte offset in <paramref name='buffer'/> at which to begin copying bytes to the current stream.</param>
			<param name='count'>The number of bytes to be written to the current stream.</param>
			<exception cref='ArgumentException'>The sum of <paramref name='offset'/> and <paramref name='count'/> is greater than the buffer length.</exception>
			<exception cref='ArgumentNullException'><paramref name='buffer'/> is <see langword='null'/>.</exception>
			<exception cref='ArgumentOutOfRangeException'><paramref name='offset'/> or <paramref name='count'/> is negative.</exception>
			<exception cref='IOException'>An I/O error occurs.</exception>
			<exception cref='NotSupportedException'>The stream does not support writing.</exception>
			<exception cref='ObjectDisposedException'>Methods were called after the stream was closed.</exception>
		</method>
		
		<method name="EndWrite">
			<summary>
				Ends an asynchronous write operation.
			</summary>
			<param name="asyncResult">A reference to the outstanding asynchronous I/O request.</param>
			<exception cref="ArgumentNullException"><paramref name="asyncResult"/> is <see langword='null'/>.</exception>
			<exception cref='ArgumentException'><paramref name='asyncResult'/> did not originate from a <see cref='BeginWrite'/> method on the current stream.</exception>
		</method>
		
		<method name='BeginRead'>
			<summary>
				Begins an asynchronous read operation.
			</summary>
			<param name='buffer'>The buffer to read the data into.</param>
			<param name='offset'>The byte offset in <paramref name='buffer'/> at which to begin writing data read from the stream.</param>
			<param name='count'>The maximum number of bytes to read.</param>
			<param name='callback'>An optional asynchronous callback, to be called when the read is complete.</param>
			<param name="state">A user-provided object that distinguishes this particular asynchronous read request from other requests.</param>
			<returns>An <see cref='IAsyncResult'/> that represents the asynchronous read, which could still be pending.</returns>
			<exception cref="ArgumentException">One or more of the arguments is invalid.</exception>
			<exception cref="ObjectDisposedException">Methods were called after the stream was closed.</exception>
			<exception cref='NotSupportedException'>The current <see cref='Stream'/> implementation does not support the read operation.</exception>
		</method>
		
		<method name='Read'>
			<summary>
				Reads a sequence of bytes from the current stream and advances the position within the stream by the number of bytes read.
			</summary>
			<param name='buffer'>An array of bytes. When this method returns, the buffer contains the specified byte array with the values between <paramref name='offset'/> and (<paramref name='offset'/> + <paramref name='count'/> - 1) replaced by the bytes read from the current source.</param>
			<param name='offset'>The zero-based byte offset in <paramref name='buffer'/> at which to begin storing the data read from the current stream.</param>
			<param name='count'>The maximum number of bytes to be read from the current stream.</param>
			<returns>The total number of bytes read into the buffer. This can be less than the number of bytes requested if that many bytes are not currently available, or zero (0) if the end of the stream has been reached.</returns>
			<exception cref='ArgumentException'>The sum of <paramref name='offset'/> and <paramref name='count'/> is greater than the buffer length.</exception>
			<exception cref='ArgumentNullException'><paramref name='buffer'/> is <see langword='null'/>.</exception>
			<exception cref='ArgumentOutOfRangeException'><paramref name='offset'/> or <paramref name='count'/> is negative.</exception>
			<exception cref='IOException'>An I/O error occurs.</exception>
			<exception cref='NotSupportedException'>The stream does not support reading.</exception>
			<exception cref='ObjectDisposedException'>Methods were called after the stream was closed.</exception>
		</method>

		<method name="EndRead">
			<summary>
				Ends an asynchronous read operation.
			</summary>
			<param name="asyncResult">A reference to the pending asynchronous request to finish.</param>
			<returns>The number of bytes read from the stream, between zero (0) and the number of bytes you requested. Streams return zero (0) only at the end of the stream, otherwise, they should block until at least one byte is available.</returns>
			<exception cref="ArgumentNullException"><paramref name="asyncResult"/> is <see langword='null'/>.</exception>
			<exception cref='ArgumentException'><paramref name='asyncResult'/> did not originate from a <see cref='BeginRead'/> method on the current stream.</exception>
		</method>
		
		<property name='CanRead'>
			<summary>
				Gets a value indicating whether the current stream supports reading.
			</summary>
			<value>True if the stream supports reading; otherwise, false.</value>
		</property>

		<property name='CanWrite'>
			<summary>
				Gets a value indicating whether the current stream supports writing.
			</summary>
			<value>True if the stream supports writing; otherwise, false.</value>
		</property>

		<property name='CanSeek'>
			<summary>
				Gets a value indicating whether the current stream supports seeking.
			</summary>
			<value>True if the stream supports seeking; otherwise, false.</value>
		</property>

		<property name='CanRead:always'>
			<summary>
				Gets a value indicating whether the current stream supports reading.
			</summary>
			<value>This property returns true unless the stream is closed.</value>
		</property>

		<property name='CanWrite:always'>
			<summary>
				Gets a value indicating whether the current stream supports writing.
			</summary>
			<value>This property returns true unless the stream is closed.</value>
		</property>

		<property name='CanSeek:always'>
			<summary>
				Gets a value indicating whether the current stream supports seeking.
			</summary>
			<value>This property returns true unless the stream is closed.</value>
		</property>

		<property name='CanRead:never'>
			<summary>
				Gets a value indicating whether the current stream supports reading.
			</summary>
			<value>This property always returns false.</value>
		</property>

		<property name='CanWrite:never'>
			<summary>
				Gets a value indicating whether the current stream supports writing.
			</summary>
			<value>This property always returns false.</value>
		</property>

		<property name='CanSeek:never'>
			<summary>
				Gets a value indicating whether the current stream supports seeking.
			</summary>
			<value>This property always returns false.</value>
		</property>
	</Stream>
</root>